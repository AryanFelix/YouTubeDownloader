name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write

env:
  ENTRY_SCRIPT: main.py
  APP_NAME: YouTubeDownloader

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Prepare portable ffmpeg (platform-specific)
        shell: bash
        run: |
          set -euo pipefail
          declare -A FFMPEG_URLS
          FFMPEG_URLS[windows-latest]="https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl.zip"
          FFMPEG_URLS[ubuntu-latest]="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
          FFMPEG_URLS[macos-latest]="https://evermeet.cx/ffmpeg/ffmpeg-6.0.zip"

          KEY="${{ matrix.os }}"
          URL="${FFMPEG_URLS[$KEY]}"
          echo "Selected ffmpeg URL for $KEY: $URL"
          mkdir -p ffmpeg
          tmpdir="$(mktemp -d)"
          cd "$tmpdir"

          if [[ "$KEY" == "windows-latest" ]]; then
            curl -sSL -o ffmpeg.zip "$URL"
            unzip -q ffmpeg.zip
            find . -type f \( -iname "ffmpeg.exe" -o -iname "ffprobe.exe" \) -exec cp {} "${GITHUB_WORKSPACE}/ffmpeg/" \;
          elif [[ "$KEY" == "macos-latest" ]]; then
            curl -sSL -o ffmpeg.zip "$URL"
            unzip -q ffmpeg.zip
            find . -type f \( -name "ffmpeg" -o -name "ffprobe" \) -perm -u=x -exec cp {} "${GITHUB_WORKSPACE}/ffmpeg/" \;
          else
            curl -sSL -o ffmpeg.tar.xz "$URL"
            tar -xf ffmpeg.tar.xz
            dir=$(find . -maxdepth 2 -type d -name "*ffmpeg*static*" | head -n1 || true)
            if [[ -n "$dir" ]]; then
              find "$dir" -type f \( -name "ffmpeg" -o -name "ffprobe" \) -exec cp {} "${GITHUB_WORKSPACE}/ffmpeg/" \;
            else
              find . -type f \( -name "ffmpeg" -o -name "ffprobe" \) -exec cp {} "${GITHUB_WORKSPACE}/ffmpeg/" \;
            fi
          fi

          chmod +x "${GITHUB_WORKSPACE}/ffmpeg/"* || true
          echo "ffmpeg files in workspace:"
          ls -la ffmpeg || true

      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          ENTRY_SCRIPT: main.py
          APP_NAME: YouTubeDownloader
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Building for Windows..."
          $APPNAME = $env:APP_NAME
          $ICON = "assets\logoApp.ico"
          $ADD_DATA_ASSETS = "assets;assets"
          $ADD_DATA_FFMPEG = "ffmpeg;ffmpeg"
          $ENTRY = $env:ENTRY_SCRIPT

          python -m PyInstaller --noconfirm --onefile --windowed `
            --name "$APPNAME" `
            --icon "$ICON" `
            --add-data "$ADD_DATA_ASSETS" `
            --add-data "$ADD_DATA_FFMPEG" `
            "$ENTRY"

          $buildPath = Join-Path $PWD "dist" ($APPNAME + ".exe")
          if (-not (Test-Path $buildPath)) {
            Get-ChildItem -Path dist -Recurse -Force | Format-Table -AutoSize
            throw "Build artifact not found at $buildPath"
          }

          New-Item -ItemType Directory -Force -Path artifact | Out-Null
          Copy-Item -Path $buildPath -Destination (Join-Path $PWD "artifact" -ChildPath (Split-Path $buildPath -Leaf)) -Force
          if (Test-Path .\ffmpeg) { Copy-Item -Path .\ffmpeg -Destination .\artifact\ -Recurse -Force }

          $tag = "${{ github.ref_name }}" -replace 'refs/tags/',''
          if (-not $tag) { $tag = "latest" }
          $ARTNAME = "$APPNAME-windows-latest-$tag.zip"
          $zipPath = Join-Path $PWD $ARTNAME
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path artifact\* -DestinationPath $zipPath -Force
          $hash = Get-FileHash -Path $zipPath -Algorithm SHA256
          $hash.Hash | Out-File -Encoding ASCII -FilePath ("${zipPath}.sha256")
          Write-Host "Created $zipPath and ${zipPath}.sha256"

      - name: Build with PyInstaller (Linux / macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        env:
          ENTRY_SCRIPT: main.py
          APP_NAME: YouTubeDownloader
        run: |
          set -euo pipefail
          echo "Building for ${{ matrix.os }}..."
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ICON="assets/logoApp.icns"
          else
            ICON="assets/logoApp.png"
          fi

          python -m PyInstaller --noconfirm --onefile --windowed \
            --name "$APP_NAME" \
            --icon "$ICON" \
            --add-data "assets:assets" \
            --add-data "ffmpeg:ffmpeg" \
            "$ENTRY_SCRIPT"

          mkdir -p artifact
          if [ -f "dist/$APP_NAME" ]; then
            cp "dist/$APP_NAME" artifact/
          fi
          cp -r ffmpeg artifact/ || true

          tag="${GITHUB_REF_NAME:-latest}"
          ARTNAME="$APP_NAME-${{ matrix.os }}-$tag.zip"
          if command -v zip >/dev/null 2>&1; then
            zip -r "$ARTNAME" artifact
          else
            tar -czf "$ARTNAME" -C artifact .
          fi
          sha256sum "$ARTNAME" > "$ARTNAME.sha256"
          echo "Created $ARTNAME and $ARTNAME.sha256"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: builds-${{ matrix.os }}
          path: |
            *.zip
            *.sha256

  release:
    name: Create Release and attach artifacts
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release_artifacts

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: Automated release generated by GitHub Actions
          files: ./release_artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
