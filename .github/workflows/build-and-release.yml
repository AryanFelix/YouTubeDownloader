name: Build & Release (Windows)

on:
  push:
    tags:
      - 'v*'         # run when you push a tag like v1.0.0
  workflow_dispatch:  # allow manual run

jobs:
  build_windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yt-dlp pyinstaller

      # Download portable ffmpeg for Windows (x64)
      - name: Download ffmpeg (Windows build)
        run: |
          powershell -Command " \
            $zip = 'ffmpeg.zip'; \
            Invoke-WebRequest -Uri 'https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip' -OutFile $zip; \
            Expand-Archive -Path $zip -DestinationPath ./ffmpeg_temp; \
            Remove-Item $zip -Force; \
            # find bin path and copy ffmpeg.exe, ffprobe.exe into ./ffmpeg \
            $bin = Get-ChildItem -Path ./ffmpeg_temp -Recurse -Filter 'ffmpeg.exe' | Select-Object -First 1; \
            $binDir = Split-Path $bin.FullName; \
            New-Item -ItemType Directory -Force -Path './ffmpeg'; \
            Copy-Item -Path (Join-Path $binDir 'ffmpeg.exe') -Destination './ffmpeg/ffmpeg.exe'; \
            Copy-Item -Path (Join-Path $binDir 'ffprobe.exe') -Destination './ffmpeg/ffprobe.exe' -ErrorAction SilentlyContinue; \
            Remove-Item -Recurse -Force ./ffmpeg_temp; \
          "

      - name: Build exe with PyInstaller
        run: |
          pyinstaller --onefile --name "YouTubeDownloader.exe" --add-data "ffmpeg;ffmpeg" "download_youtube_best.py"

      - name: Prepare artifact name and path
        run: |
          mkdir artifact
          copy /Y dist\YouTubeDownloader.exe artifact\YouTubeDownloader.exe

      - name: Create release (if triggered by tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: Automated release generated by GitHub Actions
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset (if release created)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: YouTubeDownloader.exe
          files: artifact/YouTubeDownloader.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact (workflow run artifact)
        uses: actions/upload-artifact@v4
        with:
          name: YouTubeDownloader-windows
          path: artifact/YouTubeDownloader.exe
