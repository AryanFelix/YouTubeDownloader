name: Build & Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write
  id-token: write

env:
  ENTRY_SCRIPT: main.py
  APP_NAME: YouTubeDownloader

jobs:
  build:
    name: Build (matrix)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            ext: zip
          - os: ubuntu-latest
            ext: tar.gz
          - os: macos-latest
            ext: tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install deps & PyInstaller
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller
        shell: bash

      - name: Install ffmpeg (platform)
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y ffmpeg
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew update || true
            brew install ffmpeg || true
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            choco install -y ffmpeg
          fi
        shell: bash

      - name: Build with PyInstaller
        env:
          PYTHONUNBUFFERED: 1
        run: |
          echo "Building on runner: $RUNNER_OS / matrix.os = ${{ matrix.os }}"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ADD_DATA="assets;assets"
            pyinstaller --noconfirm --onefile --name "${{ env.APP_NAME }}.exe" --add-data "$ADD_DATA" "${{ env.ENTRY_SCRIPT }}"
            BUILD_PATH="dist/${{ env.APP_NAME }}.exe"
          else
            ADD_DATA="assets:assets"
            pyinstaller --noconfirm --onefile --name "${{ env.APP_NAME }}" --add-data "$ADD_DATA" "${{ env.ENTRY_SCRIPT }}"
            BUILD_PATH="dist/${{ env.APP_NAME }}"
          fi

          echo "Expected build path: $BUILD_PATH"
          if [ ! -f "$BUILD_PATH" ]; then
            echo "ERROR: Build artifact not found at $BUILD_PATH"
            ls -la dist || true
            exit 1
          fi

          mkdir -p artifact
          cp "$BUILD_PATH" artifact/

          if [ -d "ffmpeg" ]; then
            cp -r ffmpeg artifact/
          fi

          ARTNAME="${{ env.APP_NAME }}-${{ matrix.os }}-${GITHUB_REF_NAME}.${{ matrix.ext }}"
          echo "Artifact name will be: $ARTNAME"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell -Command "Compress-Archive -Path artifact/* -DestinationPath '${GITHUB_WORKSPACE}/${ARTNAME}' -Force"
          else
            tar -czf "${GITHUB_WORKSPACE}/${ARTNAME}" -C artifact .
          fi

          echo "Created archive: ${GITHUB_WORKSPACE}/${ARTNAME}"
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.os }}-${{ github.ref_name }}.${{ matrix.ext }}
          path: ${{ github.workspace }}/${{ env.APP_NAME }}-${{ matrix.os }}-${{ github.ref_name }}.${{ matrix.ext }}

  create-release:
    name: Create Release and attach artifacts
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts from build job(s)
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts

      - name: List downloaded artifacts
        run: ls -la downloaded_artifacts || true
        shell: bash

      - name: Create release & upload assets (softprops)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            downloaded_artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Done
        run: echo "Release ${{ github.ref_name }} created and artifacts uploaded."
        shell: bash
